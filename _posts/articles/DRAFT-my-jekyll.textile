---
  layout: post
  title: Jekyllicious
  permalink: articles/2012/09/23/my-jekyll-site
  categories: [articles]
---

<h2>I recently made a couple of changes to my <a href="https://github.com/mojombo/jekyll/wiki/install">Jekyll</a> site in order to streamline its organization. To learn about how it works, click <a href="https://github.com/mojombo/jekyll/wiki/install">here</a>.</h2>

<div class="img_wrap"><img src="/img/articles/jekyll-1024x574.jpg" width="100%" /></div>

<h3>Not the same ol' loop</h3>

Since each implementation is slightly different, I thought I could just focus on what makes this implementation special. This one takes special advantage of the "permalink" feature so there is no need to have the "static" non-post pages in the root directory... which can get kind of messy when you have a lot of pages.  

Jekyll allows you to loop through posts, because a) it's awesome to be able to loop through things, and b) because that's how you set up a home page to a blog--you loop through each entry with some kind of number limit so the most recent posts are always on your home page. OK cool. So in many of the standard tutorials, they just teach you the regular generic loop through all posts.


<pre>
{ % for post in site.posts % }
   ARTICLE
{ % endfor % }
</pre>



Instead, I use two loops. First, I loop through the categories, then for each category I loop through the post in a particular defined category. Voila! This way, looping through categories means that I'm now able to create other "posts" that are not articles that I want to display as a blog entry.


<pre>
{ % for category in site.categories % } 
	{ % for post in site.categories['articles'] % }
	ARTICLE
	{ % endfor % }
{ % endfor % }
</pre>
<em>Note: There are extra spaces in the liquid tags... so jekyll doesn't actually create a loop on this page.</em>


<h3>No pages, only posts</h3>
Now that we can loop through whichever category we want, we can put all pages in the _posts directory...and even put them in subdirectories so they can be neat and tidy. I have it set up like so:

<pre>
_includes
_layouts
_posts	
  articles
    2013-01-07-article-name.html
  pages
    3000-01-01-redirect-sample.html
  redirects
	3000-01-01-redirect-sample.html
_site
css
js
img
</pre>

This way, every item is set up as a post, the directory structure is cleaner and nicer to deal with. There is no particular reason that I named the pages and redirects 3000-01-01... other than to give the non-blog posts a date that falls well outside of the range. For each non-blog page, I configure the permalink so it will map to whatever I tell it when jekyll builds the static site. For "code samples", it looks like below and will take the user to "/code-samples/".

<pre>
---
  layout: default
  title: Code Samples
  permalink: code-samples/
---
</pre>

So that's the gist of my Jekyll implementation. Basically, I've done a couple of things differently in order to end up with a much cleaner site organization. Check out the repo <a href="https://github.com/nickcottrell/nickcottrell.github.com">here</a>.